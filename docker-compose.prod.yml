version: '3.8'

services:
  # PostgreSQL Database with security hardening
  postgres:
    image: postgres:15-alpine
    container_name: waitlessq_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-waitlessq}
      POSTGRES_USER: ${POSTGRES_USER:-waitlessq_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-waitlessq_user} -d ${POSTGRES_DB:-waitlessq}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: postgres

  # Redis with authentication and security
  redis:
    image: redis:7-alpine
    container_name: waitlessq_redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Backend API with multiple instances for load balancing
  backend-1: &backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: waitlessq_backend_1
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-waitlessq_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-waitlessq}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    volumes:
      - app_uploads:/app/uploads

  backend-2:
    <<: *backend
    container_name: waitlessq_backend_2

  backend-3:
    <<: *backend
    container_name: waitlessq_backend_3

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: waitlessq_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://api.yourdomain.com
      - REACT_APP_WS_URL=wss://api.yourdomain.com
      - REACT_APP_ENVIRONMENT=production
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # PWA Generator Service
  pwa-generator:
    build:
      context: ./pwa-generator
      dockerfile: Dockerfile
    container_name: waitlessq_pwa_generator
    restart: unless-stopped
    environment:
      - BACKEND_URL=http://backend-1:8000
      - ENVIRONMENT=production
    networks:
      - backend
      - frontend
    volumes:
      - pwa_storage:/app/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: waitlessq_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend
      - pwa-generator
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Log aggregation with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: waitlessq_fluent_bit
    restart: unless-stopped
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: waitlessq_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: waitlessq_backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - backend
    depends_on:
      - postgres
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true

networks:
  frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: waitlessq_frontend
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: waitlessq_backend
    internal: true  # Backend network is internal only
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: waitlessq_monitoring
    internal: true  # Monitoring network is internal only

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/waitlessq/postgres
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/waitlessq/backups
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/waitlessq/redis
  pwa_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/waitlessq/pwa
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/waitlessq/uploads
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local